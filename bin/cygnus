#!/usr/bin/env ruby
# ----------------------------------------------------------------------------- #
#         File: cygnus
#  Description: A class that displays text using a pad.
#         The motivation for this is to put formatted text and not care about truncating and 
#         stuff. Also, there will be only one write, not each time scrolling happens.
#         I found textview code for repaint being more complex than required.
#       Author: rkumar http://github.com/rkumar/mancurses/
#         Date: 2011-11-09 - 16:59
#      License: Same as Ruby's License (http://www.ruby-lang.org/LICENSE.txt)
#  Last update: 2013-03-15 19:21
#
#  == CHANGES
#  == BUGS
#     _ white line at bottom and right
#     _ restrict to certain number of rows, space pages
#       this means we need to map space Alt-n etc ourselfves.
#     _ truncation is not correct
#     x showing file should put filename on top
#     x when changing dirs , old crow is left, should be first, or previously used.
#       when form triggers a key then bounds check not run. form keys are a pain with pad
#       anything happening outside of here
#     x unable to display a file with very long lines. - these were dos format with CR in it.
#
#  == TODO 
#
#     _ columnate, fix alignment with truncating, 
#       _ paging when more than pagesize * cols.
#       _ need to get the keys, in fact make this the first thing on top.
#         such as parent. pop. + etc. bookmark etc
#     _ work on common file, so functionality of cetus can be shared easily
#     x use same keys as cetus for parent pop etc , . ' etc maybe even backtick for menu
#     _ jump to single pane and back.
#     _ save bookmarks
#     x view files from z and viminfo
#
#
#     when moving right, also don't pan straight away
#     x add mappings and process key in handle_keys and other widget things
#     x user can put text or list
#     . handle putting data again and overwriting existing
#     . formatted text
#     x search and other features
#     - can pad movement and other ops be abstracted into module for reuse
#     / get scrolling like in vim (C-f e y b d)
#     - alert issue of leaving a blank is poss due to using prefresh i/o copywin
#
#   == TODO 2013-03-07 - 20:34 
#   _ key bindings not showing up -- bind properly
#   _ F1 screen leaves everything blank, so does bindings
# ----------------------------------------------------------------------------- #
#
require 'rbcurse'
require 'cygnus'
require 'cygnus/textpad'
require 'rbcurse/core/util/app'
require 'fileutils'
include Cygnus


class DirRenderer
  def render pad, lineno, text
    bg = :black
    fg = :white
    att = NORMAL
    cp = $datacolor
    if File.directory? text
      fg = :blue
      att = BOLD
      text << "/" unless text[-1] == "/"
      cp = get_color($datacolor, fg, bg)
    elsif File.symlink? text
      fg = :magenta
      #text << "->"
      text = text + "->"
      cp = get_color($datacolor, fg, bg)
    elsif File.executable? text
      fg = :yellow
      #text << "*"
      text = text + "*"
      cp = get_color($datacolor, fg, bg)
    elsif text =~ /(~|swp)$/
      fg = :blue
      #att = BOLD
      cp = get_color($datacolor, fg, bg)
    else
    end
    FFI::NCurses.wattron(pad,FFI::NCurses.COLOR_PAIR(cp) | att)
    FFI::NCurses.mvwaddstr(pad, lineno, 0, text)
    FFI::NCurses.wattroff(pad,FFI::NCurses.COLOR_PAIR(cp) | att)

  end # def
end # class
def padpopuplist list, config={}, &block
  raise ArgumentError, "Nil list received by popuplist" unless list
  #require 'cygnus/textpad'

  max_visible_items = config[:max_visible_items]
  row = config[:row] || 5
  col = config[:col] || 5
  relative_to = config[:relative_to]
  if relative_to
    layout = relative_to.form.window.layout
    row += layout[:top]
    col += layout[:left]
  end
  config.delete :relative_to
  longest = list.max_by(&:length)
  width = config[:width] || longest.size()+2 # borders take 2
  if config[:title]
    width = config[:title].size + 2 if width < config[:title].size
  end
  height = config[:height]
  height ||= [max_visible_items || 10+2, list.length+2].min 
  #layout(1+height, width+4, row, col) 
  layout = { :height => 0+height, :width => 0+width, :top => row, :left => col } 
  window = VER::Window.new(layout)
  form = RubyCurses::Form.new window

  listconfig = config[:listconfig] || {}
  listconfig[:list] = list
  listconfig[:width] = width
  listconfig[:height] = height
  #listconfig[:selection_mode] ||= :single
  listconfig.merge!(config)
  listconfig.delete(:row); 
  listconfig.delete(:col); 
  # trying to pass populists block to listbox
  #lb = RubyCurses::List.new form, listconfig, &block
  lb = Cygnus::TextPad.new form, listconfig, &block
  #lb = Cygnus::TextPad.new form, :height => height, :width => width, :row => 0, :col => 0 , :title => "A title", :name => "popup"
  lb.text(list)
  #
  window.bkgd(Ncurses.COLOR_PAIR($reversecolor));
  form.repaint
  Ncurses::Panel.update_panels
  begin
    while((ch = window.getchar()) != 999 )
      case ch
      when -1
        next
      when ?\C-q.getbyte(0)
        break
      else
        lb.handle_key ch
        form.repaint
        if ch == 13 || ch == 10
          return lb.current_index #if lb.selection_mode != :multiple

          #            x = lb.selected_indices
          return x if x
          x = lb.current_index unless x
          return [x]
          # if multiple selection, then return list of selected_indices and don't catch 32
          ##elsif ch == 32      # if single selection
          return lb.current_index #if lb.selection_mode != :multiple
        end
        #yield ch if block_given?
      end
    end
  ensure
    window.destroy  
  end
  return nil
end
def main_menu
  h = { 
    :a => :ack,
    "/" => :ffind,
    :l => :locate,
    :v => :viminfo,
    :z => :z_interface,
    :d => :child_dirs,
    :r => :recent_files,
    :t => :dirtree,
    "4" => :tree,
    :s => :sort_menu, 
    :F => :filter_menu,
    :c => :command_menu ,
    :B => :bindkey_ext_command,
    :M => :newdir,
    "%" => :newfile,
    :X => :file_navigator,
    :x => :extras
  }
  ch, binding = menu "Main Menu", h
  #alert "Menu got #{ch}, #{binding}" if ch
end
## 
#
#  make one which takes a single key and returns that key
#  Then call that from menu, indexed list etc, so we are not copying
#  that same thing over and over for tiny variations.
#
def menu title, hash, config={}, &block
  raise ArgumentError, "Nil hash received by menu" unless hash
  list = []
  hash.each_pair { |k, v| list << "   #[fg=yellow, bold] #{k} #[/end]    #[fg=green] #{v} #[/end]" }
  #  s="#[fg=green]hello there#[fg=yellow, bg=black, dim]"
  config[:title] = title
  ch = padpopup list, config, &block
  return unless ch
  if ch.size > 1
    # could be a string due to pressing enter
    # but what if we format into multiple columns
    ch = ch.strip[0]
  end

  binding = hash[ch]
  binding = hash[ch.to_sym] unless binding
  if binding
    if respond_to?(binding, true)
      send(binding)
    end
  end
  return ch, binding
end

# pops up a list, taking a single key and returning if it is in range of 33 and 126
def padpopup list, config={}, &block
  #require 'cygnus/textpad'
  max_visible_items = config[:max_visible_items]
  row = config[:row] || 5
  col = config[:col] || 5
  relative_to = config[:relative_to]
  if relative_to
    layout = relative_to.form.window.layout
    row += layout[:top]
    col += layout[:left]
  end
  config.delete :relative_to
  #longest = list.max_by(&:length)
  width = config[:width] || 60
  if config[:title]
    width = config[:title].size + 2 if width < config[:title].size
  end
  height = config[:height]
  height ||= [max_visible_items || 25, list.length+2].min 
  #layout(1+height, width+4, row, col) 
  layout = { :height => 0+height, :width => 0+width, :top => row, :left => col } 
  window = VER::Window.new(layout)
  form = RubyCurses::Form.new window

  ## added 2013-03-13 - 18:07 so caller can be more specific on what is to be returned
  valid_keys_int = config.delete :valid_keys_int
  valid_keys_char = config.delete :valid_keys_char

  listconfig = config[:listconfig] || {}
  #listconfig[:list] = list
  listconfig[:width] = width
  listconfig[:height] = height
  #listconfig[:selection_mode] ||= :single
  listconfig.merge!(config)
  listconfig.delete(:row); 
  listconfig.delete(:col); 
  # trying to pass populists block to listbox
  #lb = RubyCurses::List.new form, listconfig, &block
  lb = Cygnus::TextPad.new form, listconfig, &block
  #lb = Cygnus::TextPad.new form, :height => height, :width => width, :row => 0, :col => 0 , :title => "A title", :name => "popup"
  #lb.text(list)
  ## TODO FIXME hardocoding tmux format
  lb.formatted_text(list, :tmux)
  #
  window.bkgd(Ncurses.COLOR_PAIR($reversecolor));
  form.repaint
  Ncurses::Panel.update_panels
  if valid_keys_int.nil? && valid_keys_char.nil?
    valid_keys_int = (32..126)
  end

  begin
    while((ch = window.getchar()) != 999 )

      # if a char range or array has been sent, check if the key is in it and send back
      # else just stay here
      if valid_keys_char
        if ch > 32 && ch < 127
          chr = ch.chr
          return chr if valid_keys_char.include? chr
        end
      end

      # if the user specified an array or range of ints check against that
      # therwise use the range of 33 .. 126
      return ch.chr if valid_keys_int.include? ch

      case ch
      when -1
        alert "does it really come here? -1 XXXXXXX"
        next
      when ?\C-q.getbyte(0)
        break
      else
        #if ch > 32 && ch < 127
        #ch = ch.chr
        #return ch
        #end
        if ch == 13 || ch == 10
          s = lb.current_value.to_s # .strip #if lb.selection_mode != :multiple
          return s
          #ch = s[0].ord
        end
        # close if escape or double escape
        if ch == 27 || ch == 2727
          return nil
        end
        lb.handle_key ch
        form.repaint
      end
    end
  ensure
    window.destroy  
  end
  return nil
end
# pops up a list, taking a single key and returning if it is in range of 33 and 126
def full_indexed_list dir=Dir.pwd, config={}, &block
  #require 'cygnus/textpad'
  max_visible_items = config[:max_visible_items]
  row = config[:row] || 0
  col = config[:col] || 0
  relative_to = config[:relative_to]
  if relative_to
    layout = relative_to.form.window.layout
    row += layout[:top]
    col += layout[:left]
  end
  config.delete :relative_to
  #longest = list.max_by(&:length)
  width = config[:width] || FFI::NCurses.COLS
  if config[:title]
    width = config[:title].size + 2 if width < config[:title].size
  end
  height = config[:height]
  #height ||= [max_visible_items || 25, list.length+2].min 
  height ||= FFI::NCurses.LINES 
  #layout(1+height, width+4, row, col) 
  layout = { :height => 0+height, :width => 0+width, :top => row, :left => col } 
  destroying = false
  if config[:form]
    #form = config[:form]
    #window = form.window
    #config.delete :form
    #config.delete :window
  else
    @window = VER::Window.new(layout)
    @form = RubyCurses::Form.new @window
    destroying = true
  end
  form_bindings @form


  listconfig = config[:listconfig] || {}
  #listconfig[:list] = list
  listconfig[:width] = width
  listconfig[:height] = height
  listconfig[:name] = "fitp"
  #listconfig[:selection_mode] ||= :single
  listconfig.merge!(config)
  listconfig.delete(:row); 
  listconfig.delete(:col); 
  listconfig.delete(:window); 
  listconfig.delete(:form); 
  $files = get_file_list(dir)
  #lb = RubyCurses::List.new form, listconfig, &block
  lb = Cygnus::TextPad.new @form, listconfig, &block

  while true
  if $patt
    if $ignorecase
      $view = $files.grep(/#{$patt}/i)
    else
      $view = $files.grep(/#{$patt}/)
    end
  else 
    $view = $files
  end
  fl=$view.size
  $sta = 0 if $sta >= fl || $sta < 0
  $viewport = $view[$sta, $pagesize]
  fin = $sta + $viewport.size
  #alist = index_this_list list
  #alist = columnate alist, $grows
  # NOTE XXX we are supposed to page the list with space, using pagelist
  alist = columnate_with_indexing $viewport, $grows
  # trying to pass populists block to listbox
  #lb.text(list)
  ## TODO FIXME hardocoding tmux format
  lb.formatted_text(alist, :tmux)
  #
  @window.bkgd(Ncurses.COLOR_PAIR($datacolor));
  @form.repaint
  Ncurses::Panel.update_panels

  begin
    #while((ch = @window.getchar()) != 999 )
    ch = @window.getchar()

      # if a char range or array has been sent, check if the key is in it and send back
      # else just stay here
      if ( ( ch >= ?a.ord && ch <= ?z.ord ) || ( ch >= ?A.ord && ch <= ?Z.ord ) )
        #alert "char got (#{ch.chr})"
        chr = ch.chr
        ix = get_index chr
        if ix
          file = $viewport[ix]
          if file
            file = File.expand_path file
            if File.directory? file
              FileUtils.chdir file
              display_dir
              next
            elsif File.file? file
              #return file
              pad_display_file file, DefaultFileRenderer.new
              next
              #lb.padrefresh
            else
              alert "Some new error has crept in. Neither file not directory: (#{file})"
              $log.warn "XXXXX: FILE Neither file not directory: (#{file})"
            end
          end
        else
        end
        next
      end


      case ch
      when ?\C-q.getbyte(0)
        break
      else
        if ch == 13 || ch == 10
          return Dir.pwd
          s = lb.current_value.to_s # .strip #if lb.selection_mode != :multiple
          return s
          #ch = s[0].ord
        end
        # close if escape or double escape
        if ch == 27 || ch == 2727
          # this just closes the app ! since my finger remains on Ctrl which is Escape
        end
        #alert "got key before lb.handle #{ch.chr}"
        retval = lb.handle_key ch
        #          if retval == :UNHANDLED
        #alert "got key in unhdnalde lb.handle #{ch}, #{retval}"
        retval = @form.handle_key ch if retval == :UNHANDLED
        $log.debug "XXXX form returned #{retval}"
      end

      @form.repaint
    #end # while getchar
  ensure
    #@window.destroy if destroying
  end
  end # while true
  return nil
end
def pad_display_file filename, renderer, config={}, &block
  #require 'cygnus/textpad'
  row = config[:row] || 0
  col = config[:col] || 0
  width = config[:width] || FFI::NCurses.COLS
  height = config[:height]
  height ||= FFI::NCurses.LINES - 1
  #layout(1+height, width+4, row, col) 
  layout = { :height => 0+height, :width => 0+width, :top => row, :left => col } 
  window = VER::Window.new(layout)
  form = RubyCurses::Form.new window

  listconfig = config[:listconfig] || {}
  #listconfig[:list] = list
  listconfig[:width] = width
  listconfig[:height] = height
  #listconfig[:selection_mode] ||= :single
  listconfig.merge!(config)
  listconfig.delete(:row); 
  listconfig.delete(:col); 
  listconfig[:filename] = filename
  listconfig[:title] = filename
  listconfig[:row] = 0
  listconfig[:col] = 0
  #alist = index_this_list list
  #alist = columnate alist, $grows
  # NOTE XXX we are supposed to page the list with space, using pagelist
  #alist = columnate_with_indexing list, $grows
  # trying to pass populists block to listbox
  #lb = RubyCurses::List.new form, listconfig, &block
  lb = Cygnus::TextPad.new form, listconfig, &block
  lb.renderer renderer if renderer
  #lb.text(list)
  ## TODO FIXME hardocoding tmux format
  #lb.formatted_text(alist, :tmux)
  #
  window.bkgd(Ncurses.COLOR_PAIR($reversecolor));
  form.repaint
  Ncurses::Panel.update_panels

  begin
    while((ch = window.getchar()) != 999 )

      case ch
      when ?q.getbyte(0), ?\C-q.getbyte(0), 13, 10, 27, 2727
        break
      else
        lb.handle_key ch
        form.repaint
      end
    end
  ensure
    window.destroy  
  end
  return nil
end
def get_index key, vsz=999
  # FIXME all this stuff about another key has to happen in the popup, not here
  i = $IDX.index(key)
  return i+$stact if i
  #sz = $IDX.size
  zch = nil
  if vsz > 25
    if key == "z" || key == "Z"
      #print key
      zch = get_char
      #print zch
      i = $IDX.index("#{key}#{zch}")
      return i+$stact if i
    end
  end
  return nil
end
def get_shortcut ix
  $stact = 0
  return "<" if ix < $stact
  ix -= $stact
  i = $IDX[ix]
  return i if i
  return "->"
end
def index_this_list list
  alist = []
  list.each_with_index { |v, ix| 
    k = get_shortcut ix
    #alist << " #[fg=yellow, bold] #{k} #[end] #[fg=green]#{v}#[end]" 
    # above gets truncated by columnate and results in errors in colorparsers etc
    alist << " #{k} #{v}" 
  }
  return alist
end

  $IDX=('a'..'y').to_a
  $IDX.concat ('za'..'zz').to_a
  $IDX.concat ('Za'..'Zz').to_a
  $IDX.concat ('ZA'..'ZZ').to_a
  def indexed_list title, list, config={}, &block
    raise ArgumentError, "Nil list received by indexed_list" unless list
    alist = index_this_list list
    longest = list.max_by(&:length)
  #  s="#[fg=green]hello there#[fg=yellow, bg=black, dim]"
    config[:title] = title
    # if width is greater than size of screen then padfresh will return -1 and nothing will print
    config[:width] = [ longest.size() + 10, FFI::NCurses.COLS - 1 ].min
    config[:row] = config[:col] = 0
    ch = padpopup alist, config, &block
    return unless ch
    if ch.size > 1
      # could be a string due to pressing enter
      # but what if we format into multiple columns
      ch = ch.strip[0]
    end
    ch = get_index ch
    return nil unless ch

    return list[ch]
  end

  # This displays the list provided with alpha indexing
  # The user types one char to select the file which is then displayed
  # using your specific open file -- which could open in an ncurses window 
  # or in vim or some pager in your CLI program.
  #
  # this is a specfic functionthat has to be implemented separately by CLI and ncurses
  # programs
  def show_list
    file = indexed_list $title || "Some Files", $files
    if file 
      open_file file
    end
  end


    def file_navigator
      file = full_indexed_list
      open_file file if file
    end
    ## accept a character to save this dir as a bookmark
    # Here we are saving a file as a bookmark, not a dir
    # The config file currently has a dir
    def create_bookmark
      ch = get_string "Enter A to Z or 0-9 for bookmark: "
      return if ch.nil? || ch == ""
      #ch = @window.get_char
      if ch =~ /^[0-9A-Z]$/
        #$bookmarks[ch] = "#{Dir.pwd}:#{$cursor}"
        $bookmarks[ch] = $current_file
        $modified = true
      else
        alert "Bookmark must be upper-case character or number."
      end
    end
    def goto_bookmark ch=nil
      unless ch
        #ch = get_string "Enter bookmark char: "
        ch = @window.getchar().chr
        return if ch.nil? || ch == ""
      end
      if ch =~ /^[0-9A-Z]$/
        d = $bookmarks[ch]
        if d
          if File.file? d
            filename = File.basename(d)
            dir = File.dirname(d)
          else
            dir = d
            filename = nil
          end
          change_dir dir, filename
        else
          alert "#{ch} not a bookmark"
        end
      else
        # goto_entry_starting_with ch
        file_starting_with ch
      end
    end
    def file_starting_with fc
      ix = return_next_match(method(:file_matching?), "^#{fc}")
      if ix
        #alert "Got match for #{fc} : #{ix}"
        $view.goto_line ix
      else
        alert "Got no match for #{fc}"
      end
    end
    def file_matching? file, patt
      # WARN crashes with [ or other characters
      file =~ /#{patt}/
    end
    def filelist
      tv = @form.by_name["dirlist"]
      return tv.content()
    end

    ## generic method to take cursor to next position for a given condition
    def return_next_match binding, *args
      first = nil
      ix = 0
      filelist().each_with_index do |elem,ii|
        if binding.call(elem.to_s, *args)
          first ||= ii
          if ii > $cursor 
            ix = ii
            break
          end
        end
      end
      return first if ix == 0
      return ix
    end
    @dir_stack = []
    def change_dir dir, filename=nil
      @dir_stack << Dir.pwd unless @dir_stack.include? Dir.pwd
      FileUtils.cd dir
      display_dir
      # TODO also position cursor on file if passed
      display_file filename 
    end
    def display_file filename
      if filename && File.exists?(filename) && !File.directory?(filename)
      else
        return
      end
      pad_display_file filename, DefaultFileRenderer.new
      return
      tv = @form.by_name["tv"]
      tv.title = filename
      tv.filename(filename)
      tv.text(get_file_contents(filename))
      $viewed_file = filename
    end
    # sets $files - i have no other way till we make this into a class
    def display_dir
      list = get_file_list
      #alist = index_this_list list
      alist = columnate_with_indexing list, $grows
      lb = @form.by_name["fitp"]
      lb.formatted_text(alist, :tmux)
      lb.title = Dir.pwd
      lb.padrefresh
      @form.repaint
      $files = list
      return list
    end
    def OLD_display_dir
      p = @form.by_name["dirlist"]
      p.title(File.basename(Dir.pwd))
      text = get_file_list
      p.text(text)
    end
    def get_file_list dir="."
      list = Dir.entries dir
      list.delete_at 0
      list.collect! do |e|
        if File.directory? e
          e << "/"
        else
          e
        end
      end
      return list
    end
    def pop_dir
      d = @dir_stack.pop
      return unless d
      FileUtils.cd d
      display_dir
    end
    def filetype f
      text = `file #{f}`
      if text.include? "text"
        return :html if text.include?("HTML")
        return :text
      elsif text =~ /(archive|zip)/
        return :zip
      else
        return :unknown
      end
    end
    def get_file_contents f
      ft = filetype f
      case ft
      when :text
        lines = File.open(f,"r").readlines
        # check line 1
        if lines.first =~ /[\t\r]/
          $log.debug "Found carriage returns (or tabs) in #{f}. stripping ..."
          lines = lines.collect do |line|
            line.gsub(/[\r\t]/,"")
          end
        end
        return lines
      when :html
          t = `html2text #{f} 2>&1`.split "\n"
          if t.first.include? "command not found"
            return File.open(f,"r").readlines
          end
          return t
      when :zip
        return `tar ztvf #{f}`.split("\n")
      else
        return ["unknown type", `file #{f}`]
      end
    end
    def show
      list = get_file_list
      ix = padpopuplist list, :title => "Files", :bgcolor => :blue, :color => :white
      return unless ix
      open_file list[ix]
      #alert "Got #{list[ix]}" if ix
    end
    def open_file filename
      filename = File.expand_path filename
      if File.directory? filename
        change_dir filename
      else
        display_file filename
      end
    end
    def form_bindings form
bindings = {
  "`"   => "main_menu",
  "="   => "toggle_menu",
  "!"   => "command_mode",
  "@"   => "selection_mode_toggle",
  "M-a" => "select_all",
  "M-A" => "unselect_all",
  ","   => "goto_parent_dir",
  "+"   => "goto_dir",
  "."   => "pop_dir",
  ":"   => "subcommand",
  "'"   => "goto_bookmark",
  "/"   => "enter_regex",
  "M-p"   => "prev_page",
  "M-n"   => "next_page",
  "SPACE"   => "next_page",
  "M-f"   => "select_visited_files",
  "M-d"   => "select_used_dirs",
  "M-b"   => "select_bookmarks",
  "M-m"   => "create_bookmark",
  "M-M"   => "show_marks",
  "C-c"   => "escape",
  "ESCAPE"   => "escape",
  "TAB"   => "views",
  "C-i"   => "views",
  "?"   => "dirtree",
  "ENTER"   => "select_current",
  "D"   => "delete_file",
  "M"   => "file_actions most",
  "Q"   => "quit_command",
  "RIGHT"   => "column_next",
  "LEFT"   => "column_next 1",
  "C-x"   => "file_actions",
  "M--"   => "columns_incdec -1",
  "M-+"   => "columns_incdec 1",
  "S"     =>  "command_file list y ls -lh",
  "L"     =>  "command_file Page n less",
  "C-d"   =>  "cursor_scroll_dn",
  "C-b"   =>  "cursor_scroll_up",
  "UP"   =>  "cursor_up",
  "DOWN"   =>  "cursor_dn",
  "C-SPACE" => "visual_mode_toggle",

  "M-?"   => "print_help",
  "F1"   => "print_help",
  "F2"   => "child_dirs",
  "F3"   => "dirtree",
  "F4"   => "tree"

}
      form.bind_key(?`, 'main_menu') { main_menu }
      form.bind_key(?+, 'main_menu') { goto_dir }
      form.bind_key(?\,, 'goto_parent_dir') { goto_parent_dir }
      form.bind_key(?\M-n, 'next_page') { next_page }
      form.bind_key(?\M-p, 'prev_page') { prev_page }
      form.bind_key(32, 'next_page') { next_page }
    end
include RubyCurses

begin
  # Initialize curses
  VER::start_ncurses  # this is initializing colors via ColorMap.setup
  logfilename = File.join(ENV["LOGDIR"] || "./" ,"rbc13.log")
  $log = Logger.new(logfilename)
  $log.level = Logger::DEBUG

  catch(:close) do
  ##@window = VER::Window.root_window
  $catch_alt_digits = true; # emacs like alt-1..9 numeric arguments
  #install_help_text my_help_text

  config_read
  full_indexed_list Dir.pwd #, :form => @form
  #@form = Form.new @window
  @form.bind_key(KEY_F1, 'help'){ display_app_help }
  @form.bind_key(?\M-c, 'select class') do
    ask_classes
  end
  @form.bind_key(?', 'select bookmark') do
    ask_bookmark
  end
  @form.bind_key(?\M-d, 'View history') do
    popup_history
  end

  #header = app_header "0.0.5", :text_center => "ri Documentation Browser", :text_right =>"" #, :color => :black, :bgcolor => :white #, :attr => :bold 
  #r = 1; fc = 1;

  # this is the old style of using a label at the screen bottom, you can use the status_line

  #$message = Variable.new
  #$message.value = "Message Comes Here"
  #@status_line = status_line :row => Ncurses.LINES-1
  #@status_line.command {
    #"F1 Help | Q Quit | ? Keys | M-c Classes | M-d History | %20s" % [$message.value]
  #}

  #h = FFI::NCurses.LINES-2


  #@form.repaint
  #@window.wrefresh
  #Ncurses::Panel.update_panels
  #while((ch = @window.getchar()) != KEY_F10 )
    #break if ch == ?Q.ord || ch == ?\C-q.getbyte(0)
    #@form.handle_key(ch)
    #@window.wrefresh
  #end
  end
rescue => ex
  textdialog ["Error in rib: #{ex} ", *ex.backtrace], :title => "Exception"
  $log.debug( ex) if ex
  $log.debug(ex.backtrace.join("\n")) if ex
ensure
  @window.destroy if !@window.nil?
  VER::stop_ncurses
  p ex if ex
  p(ex.backtrace.join("\n")) if ex
end
