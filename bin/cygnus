#!/usr/bin/env ruby
# ----------------------------------------------------------------------------- #
#         File: cygnus
#  Description: A class that displays text using a pad.
#         The motivation for this is to put formatted text and not care about truncating and 
#         stuff. Also, there will be only one write, not each time scrolling happens.
#         I found textview code for repaint being more complex than required.
#       Author: rkumar http://github.com/rkumar/mancurses/
#         Date: 2011-11-09 - 16:59
#      License: Same as Ruby's License (http://www.ruby-lang.org/LICENSE.txt)
#  Last update: 2013-03-19 14:02
#
#  == CHANGES
#  == BUGS
#     x we have overridden textpad bindings yet they show / n gg etc.
#     _ show form bindings too
#     x our bindings from the hash do not show up..
#     _ white line at bottom and right
#
#  == TODO 
#
#     _ use BS to cycle files visited as in mancurses
#     _ show how many files 1-5 or 15 etc
#     _ toggle edit mode and view mode
#     _ long listing toggle + other toggles
#
#        --- release first gem version after above are done ---
#
#       _ we can try no truncating at all, the next row will automatically truncate
#       for first row use full length to truncated, second row use full - first row etc
#       that way the lower rows will not get truncated, if there are some below. They
#       can continue displaying.
#       _ need to get the keys, in fact make this the first thing on top.
#         such as parent. pop. + etc. bookmark etc
#     _ work on common file, so functionality of cetus can be shared easily
#     x use same keys as cetus for parent pop etc , . ' etc maybe even backtick for menu
#     _ jump to single pane and back.
#     _ save bookmarks
#
#
#     when moving right, also don't pan straight away
#     x add mappings and process key in handle_keys and other widget things
#     x user can put text or list
#     . handle putting data again and overwriting existing
#     x search and other features
#     - can pad movement and other ops be abstracted into module for reuse
#     / get scrolling like in vim (C-f e y b d)
#     - alert issue of leaving a blank is poss due to using prefresh i/o copywin
#
#   == TODO 2013-03-07 - 20:34 
#   _ key bindings not showing up -- bind properly
#   _ F1 screen leaves everything blank, so does bindings
# ----------------------------------------------------------------------------- #
#
require 'rbcurse'
require 'cygnus'
require 'cygnus/textpad'
require 'fileutils'
include Cygnus


class DirRenderer
  def render pad, lineno, text
    bg = :black
    fg = :white
    att = NORMAL
    cp = $datacolor
    if File.directory? text
      fg = :blue
      att = BOLD
      text << "/" unless text[-1] == "/"
      cp = get_color($datacolor, fg, bg)
    elsif File.symlink? text
      fg = :magenta
      #text << "->"
      text = text + "->"
      cp = get_color($datacolor, fg, bg)
    elsif File.executable? text
      fg = :yellow
      #text << "*"
      text = text + "*"
      cp = get_color($datacolor, fg, bg)
    elsif text =~ /(~|swp)$/
      fg = :blue
      #att = BOLD
      cp = get_color($datacolor, fg, bg)
    else
    end
    FFI::NCurses.wattron(pad,FFI::NCurses.COLOR_PAIR(cp) | att)
    FFI::NCurses.mvwaddstr(pad, lineno, 0, text)
    FFI::NCurses.wattroff(pad,FFI::NCurses.COLOR_PAIR(cp) | att)

  end # def
end # class
def padpopuplist list, config={}, &block
  raise ArgumentError, "Nil list received by popuplist" unless list
  #require 'cygnus/textpad'

  max_visible_items = config[:max_visible_items]
  row = config[:row] || 5
  col = config[:col] || 5
  relative_to = config[:relative_to]
  if relative_to
    layout = relative_to.form.window.layout
    row += layout[:top]
    col += layout[:left]
  end
  config.delete :relative_to
  longest = list.max_by(&:length)
  width = config[:width] || longest.size()+2 # borders take 2
  if config[:title]
    width = config[:title].size + 2 if width < config[:title].size
  end
  height = config[:height]
  height ||= [max_visible_items || 10+2, list.length+2].min 
  #layout(1+height, width+4, row, col) 
  layout = { :height => 0+height, :width => 0+width, :top => row, :left => col } 
  window = VER::Window.new(layout)
  form = RubyCurses::Form.new window

  listconfig = config[:listconfig] || {}
  listconfig[:list] = list
  listconfig[:width] = width
  listconfig[:height] = height
  #listconfig[:selection_mode] ||= :single
  listconfig.merge!(config)
  listconfig.delete(:row); 
  listconfig.delete(:col); 
  # trying to pass populists block to listbox
  #lb = RubyCurses::List.new form, listconfig, &block
  lb = Cygnus::TextPad.new form, listconfig, &block
  #lb = Cygnus::TextPad.new form, :height => height, :width => width, :row => 0, :col => 0 , :title => "A title", :name => "popup"
  lb.text(list)
  #
  #window.bkgd(Ncurses.COLOR_PAIR($reversecolor));
  form.repaint
  Ncurses::Panel.update_panels
  begin
    while((ch = window.getchar()) != 999 )
      case ch
      when -1
        next
      when ?\C-q.getbyte(0)
        break
      else
        lb.handle_key ch
        form.repaint
        if ch == 13 || ch == 10
          return lb.current_index #if lb.selection_mode != :multiple

          #            x = lb.selected_indices
          return x if x
          x = lb.current_index unless x
          return [x]
          # if multiple selection, then return list of selected_indices and don't catch 32
          ##elsif ch == 32      # if single selection
          return lb.current_index #if lb.selection_mode != :multiple
        end
        #yield ch if block_given?
      end
    end
  ensure
    window.destroy  
  end
  return nil
end
def main_menu
  h = { 
    :a => :ack,
    "/" => :ffind,
    :l => :locate,
    :v => :viminfo,
    :z => :z_interface,
    :d => :child_dirs,
    :r => :recent_files,
    :t => :dirtree,
    "4" => :tree,
    :s => :sort_menu, 
    :F => :filter_menu,
    :c => :command_menu ,
    :B => :bindkey_ext_command,
    :M => :newdir,
    "%" => :newfile,
    :X => :file_navigator,
    :x => :extras
  }
  ch, binding = menu "Main Menu", h
  #alert "Menu got #{ch}, #{binding}" if ch
end
## 
#
#  make one which takes a single key and returns that key
#  Then call that from menu, indexed list etc, so we are not copying
#  that same thing over and over for tiny variations.
#
def menu title, hash, config={}, &block
  raise ArgumentError, "Nil hash received by menu" unless hash
  list = []
  hash.each_pair { |k, v| list << "   #[fg=yellow, bold] #{k} #[/end]    #[fg=green] #{v} #[/end]" }
  #  s="#[fg=green]hello there#[fg=yellow, bg=black, dim]"
  config[:title] = title
  ch = padpopup list, config, &block
  return unless ch
  if ch.size > 1
    # could be a string due to pressing enter
    # but what if we format into multiple columns
    ch = ch.strip[0]
  end

  binding = hash[ch]
  binding = hash[ch.to_sym] unless binding
  if binding
    if respond_to?(binding, true)
      send(binding)
    end
  end
  return ch, binding
end

# pops up a list, taking a single key and returning if it is in range of 33 and 126
def padpopup list, config={}, &block
  #require 'cygnus/textpad'
  max_visible_items = config[:max_visible_items]
  row = config[:row] || 5
  col = config[:col] || 5
  relative_to = config[:relative_to]
  if relative_to
    layout = relative_to.form.window.layout
    row += layout[:top]
    col += layout[:left]
  end
  config.delete :relative_to
  # still has the formatting in the string so length is wrong.
  #longest = list.max_by(&:length)
  width = config[:width] || 60
  if config[:title]
    width = config[:title].size + 2 if width < config[:title].size
  end
  height = config[:height]
  height ||= [max_visible_items || 25, list.length+2].min 
  #layout(1+height, width+4, row, col) 
  layout = { :height => 0+height, :width => 0+width, :top => row, :left => col } 
  window = VER::Window.new(layout)
  form = RubyCurses::Form.new window

  ## added 2013-03-13 - 18:07 so caller can be more specific on what is to be returned
  valid_keys_int = config.delete :valid_keys_int
  valid_keys_char = config.delete :valid_keys_char

  listconfig = config[:listconfig] || {}
  #listconfig[:list] = list
  listconfig[:width] = width
  listconfig[:height] = height
  #listconfig[:selection_mode] ||= :single
  listconfig.merge!(config)
  listconfig.delete(:row); 
  listconfig.delete(:col); 
  # trying to pass populists block to listbox
  #lb = RubyCurses::List.new form, listconfig, &block
  lb = Cygnus::TextPad.new form, listconfig, &block
  #lb = Cygnus::TextPad.new form, :height => height, :width => width, :row => 0, :col => 0 , :title => "A title", :name => "popup"
  #lb.text(list)
  ## TODO FIXME hardocoding tmux format
  lb.formatted_text(list, :tmux)
  #
  #window.bkgd(Ncurses.COLOR_PAIR($reversecolor));
  form.repaint
  Ncurses::Panel.update_panels
  if valid_keys_int.nil? && valid_keys_char.nil?
    valid_keys_int = (32..126)
  end

  begin
    while((ch = window.getchar()) != 999 )

      # if a char range or array has been sent, check if the key is in it and send back
      # else just stay here
      if valid_keys_char
        if ch > 32 && ch < 127
          chr = ch.chr
          return chr if valid_keys_char.include? chr
        end
      end

      # if the user specified an array or range of ints check against that
      # therwise use the range of 33 .. 126
      return ch.chr if valid_keys_int.include? ch

      case ch
      when -1
        alert "does it really come here? -1 XXXXXXX"
        next
      when ?\C-q.getbyte(0)
        break
      else
        #if ch > 32 && ch < 127
        #ch = ch.chr
        #return ch
        #end
        if ch == 13 || ch == 10
          s = lb.current_value.to_s # .strip #if lb.selection_mode != :multiple
          return s
          #ch = s[0].ord
        end
        # close if escape or double escape
        if ch == 27 || ch == 2727
          return nil
        end
        lb.handle_key ch
        form.repaint
      end
    end
  ensure
    window.destroy  
  end
  return nil
end
# pops up a list, taking a single key and returning if it is in range of 33 and 126
def full_indexed_list dir=Dir.pwd, config={}, &block
  #require 'cygnus/textpad'
  config[:row] ||= 0
  config[:col] ||= 0
  config[:width] ||= FFI::NCurses.COLS - config[:col]
  if config[:title]
    width = config[:title].size + 2 if width < config[:title].size
  end
  height = config[:height]
  #height ||= [max_visible_items || 25, list.length+2].min 
  height ||= FFI::NCurses.LINES - config[:row]
  config[:height] = height
  config[:name] = "fitp"
  #layout(1+height, width+4, row, col) 


  #config[:suppress_border] = true
  $files = get_file_list(dir)
  lb = Cygnus::TextPad.new @form, config, &block
  form_bindings @form
  $grows = lb.rows
  $gviscols ||= 3
  $pagesize = $grows * $gviscols

  while true
    break if $quitting
    if $patt
      if $ignorecase
        $view = $files.grep(/#{$patt}/i)
      else
        $view = $files.grep(/#{$patt}/)
      end
    else 
      $view = $files
    end
    fl=$view.size
    $sta = 0 if $sta < 0
    $cursor = fl -1 if $cursor >= fl
    $cursor = 0 if $cursor < 0
    $sta = calc_sta $cursor
    $log.debug "XXX:   sta is #{$sta}, size is #{fl}"
    $viewport = $view[$sta, $pagesize]
    fin = $sta + $viewport.size
    #alist = index_this_list list
    #alist = columnate alist, $grows
    # NOTE XXX we are supposed to page the list with space, using pagelist
    alist = columnate_with_indexing $viewport, $grows
    # trying to pass populists block to listbox
    #lb.text(list)
    ## TODO FIXME hardocoding tmux format
    lb.formatted_text(alist, :tmux)
    @header.text_center($title || Dir.pwd)
    @header.text_right "#{$sta}, #{$cursor}"
    #
    @form.repaint
    Ncurses::Panel.update_panels

    begin
      #while((ch = @window.getchar()) != 999 )
      ch = @window.getchar()

      # if a char range or array has been sent, check if the key is in it and send back
      # else just stay here
      #if ( ( ch >= ?a.ord && ch <= ?z.ord ) || ( ch >= ?A.ord && ch <= ?Z.ord ) )
      if ( ( ch >= ?a.ord && ch <= ?z.ord ) || ( ch == ?Z.ord ) )
        #alert "char got (#{ch.chr})"
        chr = ch.chr
        select_hint $viewport, chr
        next
      end


      case ch
      when 32, "SPACE"
        next_page
        next
      when ?\C-q.getbyte(0)
        break
      else
        # close if escape or double escape
        if ch == 27 || ch == 2727
          # this just closes the app ! since my finger remains on Ctrl which is Escape
          c_refresh
          next
        end
        # lets check our own bindings so textpad doesn't take over
        # Either that or check form's first
        # but this way we can just reuse from cetus
        retval = c_process_key ch
        next if retval

        retval = @form.handle_key ch #if retval == :UNHANDLED
        next if retval != :UNHANDLED
        $log.debug "XXXX form returned #{retval} for #{ch}"
        #alert "got key before lb.handle #{ch.chr}"
        retval = lb.handle_key ch  if retval.nil? || retval == :UNHANDLED
        #          if retval == :UNHANDLED
        #alert "got key in unhdnalde lb.handle #{ch}, #{retval}"
        $log.debug "XXXX textpad returned #{retval} for #{ch}"
      end

      @form.repaint
      #end # while getchar
    ensure
      #@window.destroy if destroying
    end
  end # while true
  return nil
end
def key_down
  $cursor += 1
  alert "down #{$cursor}"
end
def key_up
  $cursor -= 1
end
def c_process_key c
  ch = keycode_tos c
  h = @bindings
  case ch
  when "C-m", "13", "10"
    ch = "ENTER"
  when "339"
    ch = "page_up"
  when "338"
    ch = "page_down"
  when "279"
    ch = "home"
  when "277"
    ch = "end"
  end

  binding = h[ch]
  binding = h[ch.to_sym] unless binding
  if binding
    if respond_to?(binding, true)
      send(binding)
      return true
    end
  end
  return false
end
def pad_display_file filename, renderer, config={}, &block
  #require 'cygnus/textpad'
  row = config[:row] || 0
  col = config[:col] || 0
  width = config[:width] || FFI::NCurses.COLS
  height = config[:height]
  height ||= FFI::NCurses.LINES - 1
  #layout(1+height, width+4, row, col) 
  layout = { :height => 0+height, :width => 0+width, :top => row, :left => col } 
  window = VER::Window.new(layout)
  form = RubyCurses::Form.new window

  # maintain a stack of filename so we can backspace through them
  fn = filename
  fn = "#{Dir.pwd}/#{filename}" unless filename[0] == "/"
  @file_stack << fn unless @file_stack.include? fn

  listconfig = config[:listconfig] || {}
  #listconfig[:list] = list
  listconfig[:width] = width
  listconfig[:height] = height
  #listconfig[:selection_mode] ||= :single
  listconfig.merge!(config)
  listconfig.delete(:row); 
  listconfig.delete(:col); 
  listconfig[:filename] = filename
  listconfig[:title] = filename
  listconfig[:row] = 0
  listconfig[:col] = 0
  #alist = index_this_list list
  #alist = columnate alist, $grows
  # NOTE XXX we are supposed to page the list with space, using pagelist
  #alist = columnate_with_indexing list, $grows
  # trying to pass populists block to listbox
  #lb = RubyCurses::List.new form, listconfig, &block
  lb = Cygnus::TextPad.new form, listconfig, &block
  lb.renderer renderer if renderer
  #lb.text(list)
  ## TODO FIXME hardocoding tmux format
  #lb.formatted_text(alist, :tmux)
  #
  #window.bkgd(Ncurses.COLOR_PAIR($reversecolor));
  form.repaint
  Ncurses::Panel.update_panels

  begin
    while((ch = window.getchar()) != 999 )

      # we need to show bindings if user does ? or M-?
      case ch

      when ?\C-j.getbyte(0), ?\C-n.getbyte(0)
        # jump to next file so user does not need to go out and in again
        $cursor += 1
        if $view[$cursor]
          _f = $view[$cursor]
          lb.text(get_file_contents(_f))
          lb.title(_f)
          form.repaint
          next
        end

      when ?\C-k.getbyte(0), ?\C-p.getbyte(0)
        # jump to previous file so user does not need to go out and in again
        $cursor -= 1
        if $view[$cursor]
          _f = $view[$cursor]
          lb.text(get_file_contents(_f))
          lb.title(_f)
          form.repaint
          next
        end
      when ?q.getbyte(0), ?\C-q.getbyte(0), 13, 10, 27, 2727
        # close window on q or enter or double escape
        break
      when 127
        # hitting backspace cycles through list of files viewed
        # FIXME first time we have to hit BS 2 times since we get same file we are viewing
        _f = @file_stack.pop
        if _f
          # push it to first
          @file_stack.insert 0, _f
          #lb.filename(_f)
          lb.text(get_file_contents(_f))
          form.repaint
          next
        else
          #alert "No file to pop"
        end

      else
        lb.handle_key ch
        form.repaint
      end
    end
  ensure
    window.destroy  
  end
  return nil
end
def index_this_list list
  alist = []
  list.each_with_index { |v, ix| 
    k = get_shortcut ix
    #alist << " #[fg=yellow, bold] #{k} #[end] #[fg=green]#{v}#[end]" 
    # above gets truncated by columnate and results in errors in colorparsers etc
    alist << " #{k} #{v}" 
  }
  return alist
end

  $IDX=('a'..'y').to_a
  $IDX.concat ('za'..'zz').to_a
  $IDX.concat ('Za'..'Zz').to_a
  $IDX.concat ('ZA'..'ZZ').to_a
  def indexed_list title, list, config={}, &block
    raise ArgumentError, "Nil list received by indexed_list" unless list
    alist = index_this_list list
    longest = list.max_by(&:length)
  #  s="#[fg=green]hello there#[fg=yellow, bg=black, dim]"
    config[:title] = title
    # if width is greater than size of screen then padfresh will return -1 and nothing will print
    config[:width] = [ longest.size() + 10, FFI::NCurses.COLS - 1 ].min
    config[:row] = config[:col] = 0
    ch = padpopup alist, config, &block
    return unless ch
    if ch.size > 1
      # could be a string due to pressing enter
      # but what if we format into multiple columns
      ch = ch.strip[0]
    end
    ch = get_index ch
    return nil unless ch

    return list[ch]
  end

  # This displays the list provided with alpha indexing
  # The user types one char to select the file which is then displayed
  # using your specific open file -- which could open in an ncurses window 
  # or in vim or some pager in your CLI program.
  #
  # this is a specfic functionthat has to be implemented separately by CLI and ncurses
  # programs
  def show_list files=$files
    file = indexed_list $title || "Some Files", files
    if file 
      open_file file
    end
  end


    def ischar ch
      return ( ( ch >= ?a.ord && ch <= ?z.ord ) || ( ch >= ?A.ord && ch <= ?Z.ord ) )
    end
    def goto_bookmark ch=nil
      unless ch
        #ch = get_string "Enter bookmark char: "
        ch = @window.getchar()
        return if ch.nil? || ch == "" || !ischar(ch)
        ch = ch.chr
      end
      if ch =~ /^[0-9A-Z]$/
        d = $bookmarks[ch]
        # old ones imported from lyrainfo have a : and cursor position
        if d
          if d.index ":"
            d, filename = d.split ":"
          end
          if File.file? d
            filename = File.basename(d)
            dir = File.dirname(d)
          else
            dir = d
          end
          change_dir dir, filename
        else
          perror "#{ch} not a bookmark"
        end
      else
        # goto_entry_starting_with ch
        file_starting_with ch
      end
    end
    def file_starting_with fc
      ix = return_next_match(method(:file_matching?), "^#{fc}")
      if ix
        #$view.goto_line ix
        goto_line ix
      else
        perror "Got no match for #{fc}"
      end
    end
    def file_matching? file, patt
      # WARN crashes with [ or other characters
      file =~ /#{patt}/
    end
    def filelist
      return $files
    end

    ## generic method to take cursor to next position for a given condition
    def return_next_match binding, *args
      first = nil
      ix = 0
      filelist().each_with_index do |elem,ii|
        if binding.call(elem.to_s, *args)
          first ||= ii
          if ii > $cursor 
            ix = ii
            break
          end
        end
      end
      return first if ix == 0
      return ix
    end
    @dir_stack = []
    @file_stack = []
    def change_dir dir, filename=nil
      @dir_stack << Dir.pwd unless @dir_stack.include? Dir.pwd
      $sta = $cursor = 0
      if dir.index(":")
        dir, $cursor = dir.split(":")
      end
      FileUtils.cd dir
      display_dir filename
      # TODO also position cursor on file if passed
      #display_file filename 
    end
    def display_file filename
      if filename && File.exists?(filename) && !File.directory?(filename)
      else
        return
      end
      pad_display_file filename, DefaultFileRenderer.new
      return
    end
    # sets $files - i have no other way till we make this into a class
    # FIXME take an optional file name and position cursor on that position
    def display_dir filename=nil
      $sta = $cursor = 0
      list = get_file_list
      if filename
        ix = list.index filename
        if ix 
          ## FIXME sta needs to be calced based on cursor
          $cursor = ix
        else
          # could be a curpos passed in, old style bookmark
          $cursor = filename.to_i
        end
      end
      #alist = index_this_list list
      alist = columnate_with_indexing list, $grows
      lb = @form.by_name["fitp"]
      lb.formatted_text(alist, :tmux)
      lb.title = Dir.pwd
      $title = nil
      lb.padrefresh
      @header.text_center Dir.pwd
      @header.text_right "#{$sta}, #{$cursor}"
      @form.repaint
      $files = list
      return list
    end
    def get_file_list dir="."
      list = Dir.entries dir
      list.delete_at 0
      list.reject! {|x| x[0] == "." && x[1] != "." } unless $hidden
      list.collect! do |e|
        if File.directory? e
          e << "/"
        else
          e
        end
      end
      return list
    end
    def pop_dir
      d = @dir_stack.pop
      return unless d
      FileUtils.cd d
      display_dir
    end
    def filetype f
      text = `file #{f}`
      if text.include? "text"
        return :html if text.include?("HTML")
        return :text
      elsif text =~ /(archive|zip)/
        return :zip
      else
        return :directory if File.directory? f
        return :unknown
      end
    end
    def get_file_contents f
      ft = filetype f
      case ft
      when :text
        lines = File.open(f,"r").readlines
        # check line 1
        if lines.first =~ /[\t\r]/
          $log.debug "Found carriage returns (or tabs) in #{f}. stripping ..."
          lines = lines.collect do |line|
            line.gsub(/[\r\t]/,"")
          end
        end
        return lines
      when :html
          t = `html2text #{f} 2>&1`.split "\n"
          if t.first.include? "command not found"
            return File.open(f,"r").readlines
          end
          return t
      when :zip
        return `tar ztvf #{f}`.split("\n")
      when :directory
        return Dir.glob("*")
      else
        return ["unknown type", `file #{f}`]
      end
    end
    def show
      list = get_file_list
      ix = padpopuplist list, :title => "Files", :bgcolor => :blue, :color => :white
      return unless ix
      open_file list[ix]
      #alert "Got #{list[ix]}" if ix
    end
    def open_file filename
      filename = File.expand_path filename
      if File.directory? filename
        change_dir filename
      else
        display_file filename
      end
    end
    def form_bindings form
      @bindings = {
        "`"   => "main_menu",
        "="   => "toggle_menu",
        "!"   => "command_mode",
        "@"   => "selection_mode_toggle",
        "M-a" => "select_all",
        "M-A" => "unselect_all",
        ","   => "goto_parent_dir",
        "+"   => "goto_dir",
        "."   => "pop_dir",
        ":"   => "subcommand",
        "'"   => "goto_bookmark",
        "/"   => "enter_regex",
        "M-p"   => "prev_page",
        "M-n"   => "next_page",
        "SPACE"   => "next_page",
        "M-f"   => "select_visited_files",
        "M-d"   => "select_used_dirs",
        "M-b"   => "select_bookmarks",
        "M-m"   => "create_bookmark",
        "M-M"   => "show_marks",
        "C-c"   => "escape",
        "esc"   => "escape",
        "TAB"   => "views",
        "C-i"   => "views",
        "?"   => "dirtree",
        "ENTER"   => "select_current",
        "D"   => "delete_file",
        "M"   => "file_actions most",
        "Q"   => "quit_command",
        "right"   => "column_next",
        "left"   => "column_next 1",
        "C-x"   => "file_actions",
        "M--"   => "columns_incdec -1",
        "M-+"   => "columns_incdec 1",
        "S"     =>  "command_file list y ls -lh",
        "L"     =>  "command_file Page n less",
        "C-d"   =>  "cursor_scroll_dn",
        "C-b"   =>  "cursor_scroll_up",
        "up"   =>  "cursor_up",
        "down"   =>  "cursor_dn",
        "C-space" => "visual_mode_toggle",

        "home"   => "goto_top",
        "end"   => "goto_end",
        "page_up"   => "prev_page",
        "page_down"   => "next_page",
        "M-?"   => "print_help",
        "F1"   => "print_help",
        "F2"   => "child_dirs",
        "F3"   => "dirtree",
        "F4"   => "tree"

      }
      ## remember that widgets map keys on handle_key, as late as possible
      # so these need to go on form not object, and form needs to be called first
      # since we really don't care for textpads bindings
      form.bind_key(?`, 'main_menu') { main_menu }
      form.bind_key(?+, 'goto_dir') { goto_dir }
      form.bind_key(?\,, 'goto_parent_dir') { goto_parent_dir }
      form.bind_key(?\M-n, 'next_page') { next_page }
      form.bind_key(?\M-p, 'prev_page') { prev_page }
      form.bind_key(32, 'next_page') { next_page }
      form.bind_key(?\M--, 'decrease columns') { columns_incdec -1 }
      form.bind_key(?\M-+, 'increase columns') { columns_incdec 1 }
      #form.bind_key(KEY_RIGHT, 'increase columns') { column_next  }
      #form.bind_key(KEY_LEFT, 'increase columns') { column_next 1  }
      #form.bind_key(KEY_UP, 'up') { key_up }
      # getting overridden by textpad
      #form.bind_key(KEY_DOWN, 'down') { key_down }
      form.bind_key(?/, 'ask regex') { enter_regex  }
    end
    def goto_top
      $sta = $cursor = 0
    end
    def goto_end
      $cursor = $view.size - 1
      # FIXME cursor should be visible, take page calc logic from zfm or lyra accounting for 1 offset
      $sta = calc_sta $cursor
    end
    # calculate the starting position of the page given
    # a line to go to
    # check edge case of pagesize iteself 87 it should go on page2 not page 1
    def calc_sta cur
      pages = (cur * 1.001 / $pagesize).ceil
      pages -= 1 if pages > 0
      return pages * $pagesize
    end
include RubyCurses

begin
  # Initialize curses
  VER::start_ncurses  # this is initializing colors via ColorMap.setup
  logfilename = File.join(ENV["LOGDIR"] || "./" ,"rbc13.log")
  $log = Logger.new(logfilename)
  $log.level = Logger::DEBUG
  @window = VER::Window.root_window
  @form = RubyCurses::Form.new @window

  catch(:close) do
  ##@window = VER::Window.root_window
  $catch_alt_digits = true; # emacs like alt-1..9 numeric arguments
  #install_help_text my_help_text

  config_read
  @header = app_header "cygnus", :text_center => Dir.pwd, :text_right =>"^q Quit" , :color => :green, :bgcolor => :black , :attr => :bold 
  full_indexed_list Dir.pwd, :row => 1, :col => 0, :suppress_border => true
  config_write if $writing
  #@form = Form.new @window
  #@form.bind_key(KEY_F1, 'help'){ display_app_help }
  #@form.bind_key(?\M-c, 'select class') do
    #ask_classes
  #end
  #@form.bind_key(?', 'select bookmark') do
    #ask_bookmark
  #end
  #@form.bind_key(?\M-d, 'View history') do
    #popup_history
  #end

  end
rescue => ex
  textdialog ["Error in cygnus: #{ex} ", *ex.backtrace], :title => "Exception"
  $log.debug( ex) if ex
  $log.debug(ex.backtrace.join("\n")) if ex
ensure
  @window.destroy if !@window.nil?
  VER::stop_ncurses
  p ex if ex
  p(ex.backtrace.join("\n")) if ex
end
